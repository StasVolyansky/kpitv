@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Log in";
}
@if (SignInManager.IsSignedIn(User))
{
    var currentUser = await UserManager.GetUserAsync(User);
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">@currentUser.FirstName @currentUser.LastName</a>
        <ul class="dropdown-menu">
            <li><a href="/settings" title="Settings">Settings</a></li>
            <li>
                <a onclick="LogOff()">Log Off</a>
                <form asp-area="" asp-controller="Account" asp-action="LogOff" method="post" id="logoutForm" class="form-horizontal form-log"></form>
            </li>
        </ul>
    </li>
}
else
{
    var loginProvider = SignInManager.GetExternalAuthenticationSchemes().First();
    <li>
        <a class="login-facebook" onclick="LogFB()"></a>
        <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnurl="@ViewData["ReturnUrl"]" id="logFBForm" method="post" class="form-horizontal form-log">
            <label for="remebmer">Remember?</label><input type="checkbox" name="remember"/>
            <input type="hidden" name="provider" value="@loginProvider.AuthenticationScheme" />
        </form>
    </li>
}
